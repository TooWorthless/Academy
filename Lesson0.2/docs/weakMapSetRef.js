// WeakMap
// Особливості:
// - Зберігає ключі, які мають бути об'єктами (інші типи ключів не підтримуються).
// - Значення може бути будь-яким.
// - Ключі у WeakMap зберігаються слабко — якщо об'єкт використовується лише як ключ у WeakMap, його можна звільнити збирачем сміття (Garbage Collector).

// Ключова роль:
// - Запобігання утриманню зайвої пам'яті.
// - Використовується для зберігання додаткових даних, прив'язаних до об’єктів, наприклад:
// - Метадані для об’єктів DOM.
// - Кешування результатів обчислень, пов’язаних із конкретними об’єктами.

let wm = new WeakMap();

let obj = { name: "Test" };
wm.set(obj, "some value");

// Якщо `obj` більше ніде не використовується, воно буде видалене збирачем сміття.
obj = null; // Автоматично очищає запис у WeakMap.



// WeakSet

// Особливості:
// - Зберігає тільки об'єкти.
// - Кожен об'єкт може бути присутнім лише один раз (унікальність).
// - Зберігається слабкий зв'язок між елементами та WeakSet.

// Ключова роль:
// - Відстеження набору об’єктів без утримання їх у пам’яті.
// - Застосовується, коли потрібно перевіряти, чи об'єкт належить до певного набору, але немає потреби явно утримувати цей об'єкт.

let ws = new WeakSet();

let obj2 = { id: 1 };
ws.add(obj2);

// Якщо `obj` видаляється з пам'яті, воно також автоматично видаляється з WeakSet.
obj2 = null;



// WeakRef
// Особливості:
// - Створює слабке посилання на об’єкт, яке не заважає його видаленню збирачем сміття.
// - Для доступу до об'єкта потрібно використовувати метод .deref(), який повертає об'єкт або undefined, якщо об'єкт вже видалено.

// Ключова роль:
// - Застосовується у випадках, коли потрібно тимчасово посилатися на об’єкт, але важливо, щоб ця прив’язка не завадила його видаленню збирачем сміття.

let obj3 = { data: "important" };
let weakRef = new WeakRef(obj3);

console.log(weakRef.deref()); // { data: "important" }

// Якщо `obj` більше ніде не використовується, воно буде видалено збирачем сміття.
obj3 = null;

console.log(weakRef.deref()); // undefined (об'єкт видалено).



// ВІДМІННОСТІ
// Слабке посилання на об'єкти:
// - Об'єкти можуть бути видалені з пам’яті, якщо вони більше ніде не використовуються.
// Автоматичне очищення:
// - Записи автоматично видаляються, тому немає необхідності вручну звільняти ресурси.
// Немає ітераторів:
// - Ви не можете перерахувати всі елементи WeakMap або WeakSet, оскільки вони можуть бути видалені в будь-який момент.



// ВИКОРИСТАННЯ
// WeakMap:
// - Зберігання метаданих для об'єктів (DOM-елементів, компонентів).
// - Кешування, прив'язане до "життєвого циклу" об’єкта.

// WeakSet:
// - Відстеження об’єктів, які були оброблені (наприклад, у циклі).
// - Зберігання міток для об’єктів без утримання їх у пам’яті.

// WeakRef:
// - Оптимізація використання пам'яті в складних структурах даних.
// - Тимчасові посилання на об'єкти для рідкісного доступу (у кешах, буферах).
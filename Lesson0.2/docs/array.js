// üìå 1. Array.of(...elements)
// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∏—Ö —Ç–∏–ø–∞.

// const arr = Array.of(1, 2, 3);
// console.log(arr); // [1, 2, 3]


// üìå 2. Array.from(arrayLike, mapFn, thisArg)
// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∏–∑ –º–∞—Å—Å–∏–≤–æ–ø–æ–¥–æ–±–Ω–æ–≥–æ –∏–ª–∏ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.

// mapFn ‚Äî –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
// const arr = Array.from("123", num => Number(num));
// console.log(arr); // [1, 2, 3]


// üìå 3. Array.prototype.at(index)
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã.

// const arr = [10, 20, 30];
// console.log(arr.at(-1)); // 30


// üìå 4. Array.prototype.concat(...arrays)
// –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –º–∞—Å—Å–∏–≤—ã –≤ –æ–¥–∏–Ω, –Ω–µ –∏–∑–º–µ–Ω—è—è –∏—Å—Ö–æ–¥–Ω—ã–µ.

// const arr1 = [1, 2];
// const arr2 = [3, 4];
// console.log(arr1.concat(arr2)); // [1, 2, 3, 4]


// üìå 5. Array.prototype.every(callback, thisArg)
// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç –ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É—Å–ª–æ–≤–∏—é.

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –ø—Ä–æ–≤–µ—Ä–∫—É.
// const arr = [2, 4, 6];
// console.log(arr.every(num => num % 2 === 0)); // true


// üìå 6. Array.prototype.fill(value, start, end)
// –ó–∞–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Å–∏–≤ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.

// const arr = [1, 2, 3];
// arr.fill(0, 1, 3);
// console.log(arr); // [1, 0, 0]


// üìå 7. Array.prototype.filter(callback, thisArg)
// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —ç–ª–µ–º–µ–Ω—Ç—ã, –ø—Ä–æ—à–µ–¥—à–∏–µ –ø—Ä–æ–≤–µ—Ä–∫—É.

// const arr = [1, 2, 3];
// console.log(arr.filter(num => num > 1)); // [2, 3]


// üìå 8. Array.prototype.some(callback, thisArg)
// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç —É—Å–ª–æ–≤–∏—é.

// const arr = [1, 2, 3];
// console.log(arr.some(num => num > 2)); // true


// üìå 9. Array.prototype.find(callback, thisArg)
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–π —É—Å–ª–æ–≤–∏—é.

// const arr = [1, 2, 3];
// console.log(arr.find(num => num > 1)); // 2


// üìå 10. Array.prototype.findIndex(callback, thisArg)
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–µ–≥–æ —É—Å–ª–æ–≤–∏—é.

// const arr = [1, 2, 3];
// console.log(arr.findIndex(num => num > 1)); // 1


// üìå 11. Array.prototype.flat(depth)
// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, "—Ä–∞–∑–≥–ª–∞–∂–∏–≤–∞—è" –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥–ª—É–±–∏–Ω—ã.

// depth ‚Äî –≥–ª—É–±–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1).
// const arr = [1, [2, [3]]];
// console.log(arr.flat(2)); // [1, 2, 3]


// üìå 12. Array.prototype.forEach(callback, thisArg)
// –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞.

// [1, 2, 3].forEach(num => console.log(num)); // 1 2 3


// üìå 13. Array.prototype.map(callback, thisArg)
// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, –ø—Ä–∏–º–µ–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—é –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É.

// const arr = [1, 2, 3];
// console.log(arr.map(num => num * 2)); // [2, 4, 6]


// üìå 14. Array.prototype.reduce(callback, initialValue)
// –°–≤–æ–¥–∏—Ç –º–∞—Å—Å–∏–≤ –∫ –æ–¥–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é, –ø—Ä–∏–º–µ–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—é –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É.

// const arr = [1, 2, 3];
// console.log(arr.reduce((acc, num) => acc + num, 0)); // 6


// üìå 15. Array.prototype.reduceRight(callback, initialValue)
// –¢–æ –∂–µ, —á—Ç–æ reduce, –Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ.

// const arr = [1, 2, 3];
// console.log(arr.reduceRight((acc, num) => acc + num, 0)); // 6


// üìå 16. Array.prototype.includes(value, start)
// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.

// const arr = [1, 2, 3];
// console.log(arr.includes(2)); // true


// üìå 17. Array.prototype.indexOf(value, start)
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –∏–Ω–¥–µ–∫—Å –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ -1, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.

// const arr = [1, 2, 3];
// console.log(arr.indexOf(2)); // 1


// üìå 18. Array.isArray(obj)
// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –º–∞—Å—Å–∏–≤–æ–º.

// console.log(Array.isArray([1, 2, 3])); // true


// üìå 19. Array.prototype.join(separator)
// –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –≤ —Å—Ç—Ä–æ–∫—É.

// const arr = [1, 2, 3];
// console.log(arr.join("-")); // "1-2-3"


// üìå 20. Array.prototype.lastIndexOf(value, start)
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ -1, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.

// const arr = [1, 2, 3, 1];
// console.log(arr.lastIndexOf(1)); // 3


// üìå 21. Array.prototype.slice(start, end)
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç start –¥–æ end (–Ω–µ –≤–∫–ª—é—á–∞—è end).

// const arr = [1, 2, 3];
// console.log(arr.slice(1, 2)); // [2]


// üìå 22. Array.prototype.splice(start, deleteCount, ...items)
// –ò–∑–º–µ–Ω—è–µ—Ç –º–∞—Å—Å–∏–≤: –¥–æ–±–∞–≤–ª—è–µ—Ç/—É–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã.

// const arr = [1, 2, 3];
// arr.splice(1, 1, 4);
// console.log(arr); // [1, 4, 3]


// üìå 23. Array.prototype.sort(compareFn)
// –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤.

// compareFn ‚Äî —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.
// const arr = [3, 1, 2];
// arr.sort((a, b) => a - b);
// console.log(arr); // [1, 2, 3]


// üìå 24. Array.prototype.toString()
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞.

// const arr = [1, 2, 3];
// console.log(arr.toString()); // "1,2,3"


// üìå 25. Array.prototype.values()
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –º–∞—Å—Å–∏–≤–∞.

// for (const value of [1, 2, 3].values()) {
//   console.log(value); // 1, 2, 3
// }


// üìå 26. Array.prototype.entries()
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–∞—Ä [–∏–Ω–¥–µ–∫—Å, –∑–Ω–∞—á–µ–Ω–∏–µ].

// for (const [index, value] of [1, 2, 3].entries()) {
//   console.log(index, value); // 0 1, 1 2, 2 3
// }


// üìå 27. Array.prototype.keys()
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–Ω–¥–µ–∫—Å–æ–≤ –º–∞—Å—Å–∏–≤–∞.

// for (const key of [1, 2, 3].keys()) {
//   console.log(key); // 0, 1, 2
// }


// üìå 28. Array.prototype.toReversed()
// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.

// const arr = [1, 2, 3];
// console.log(arr.toReversed()); // [3, 2, 1]


// üìå 29. Array.prototype.toSorted(compareFn)
// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤.

// const arr = [3, 1, 2];
// console.log(arr.toSorted((a, b) => a - b)); // [1, 2, 3]


// üìå 30. Array.prototype.toSpliced(start, deleteCount, ...items)
// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏, –ø–æ–¥–æ–±–Ω–æ splice.

// const arr = [1, 2, 3];
// console.log(arr.toSpliced(1, 1, 4)); // [1, 4, 3]


// üìå 31. Array.prototype.with(index, value)
// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, –∑–∞–º–µ–Ω—è—è —ç–ª–µ–º–µ–Ω—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É.

// const arr = [1, 2, 3];
// console.log(arr.with(1, 4)); // [1, 4, 3]
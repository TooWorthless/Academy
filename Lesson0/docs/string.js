

// String.prototype.at
console.log("hello".at(0)); // "h"
console.log("hello".at(4)); // "o"
console.log("hello".at(5)); // undefined (—ñ–Ω–¥–µ–∫—Å –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ)
console.log("hello".at(-1)); // "o"
console.log("hello".at(-5)); // "h"
console.log("hello".at(-6)); // undefined (—ñ–Ω–¥–µ–∫—Å –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ)
console.log("".at(0)); // undefined (–ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫)
console.log("hello".at(1.5)); // "e" (–æ–∫—Ä—É–≥–ª—é—î—Ç—å—Å—è –¥–æ 1)
console.log("hello".at(NaN)); // "h" (NaN —Å—Ç–∞—î 0)
console.log("hello".at(Infinity)); // undefined (—ñ–Ω–¥–µ–∫—Å –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ)
console.log("hello".at(undefined)); // "h" (undefined —Å—Ç–∞—î 0)
console.log("hello".at(null)); // "h" (null —Å—Ç–∞—î 0)
console.log("hello".at([])); // "h" (–ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤ —Å—Ç–∞—î 0)
console.log("hello".at([2])); // "l" (–º–∞—Å–∏–≤ –∑ –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –≤ —Ü–µ —á–∏—Å–ª–æ)
console.log("hello".at({})); // "h" (–æ–±'—î–∫—Ç —Å—Ç–∞—î 0)
console.log("hello".at(Symbol())); // TypeError: Cannot convert a Symbol to a number
console.log("hello".at(true)); // "e" (boolean –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –Ω–∞ 1)
console.log("hello".at(false)); // "h" (boolean –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –Ω–∞ 0)
console.log("hello".at("2")); // "l" (—Ä—è–¥–æ–∫ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –Ω–∞ —á–∏—Å–ª–æ)
console.log("hello".at("abc")); // "h" (–Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—î 0)

// –ü—Ä–∏–π–º–∞—î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏, —è–∫—ñ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—é—Ç—å—Å—è –Ω–∞ —á–∏—Å–ª–∞.
// –ü–æ–≤–µ—Ä—Ç–∞—î undefined, —è–∫—â–æ —ñ–Ω–¥–µ–∫—Å –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ.



// String.prototype.chartAt
console.log("hello".charAt(0)); // "h"
console.log("hello".charAt(4)); // "o"
console.log("hello".charAt(5)); // "" (—ñ–Ω–¥–µ–∫—Å –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ)
console.log("".charAt(0)); // "" (–ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫)
console.log("hello".charAt(-1)); // "" (–Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π —ñ–Ω–¥–µ–∫—Å)
console.log("hello".charAt(1.5)); // "e" (–æ–∫—Ä—É–≥–ª—é—î—Ç—å—Å—è –¥–æ 1)
console.log("hello".charAt(NaN)); // "h" (NaN —Å—Ç–∞—î 0)
console.log("hello".charAt(Infinity)); // "" (—ñ–Ω–¥–µ–∫—Å –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ)
console.log("hello".charAt(undefined)); // "h" (undefined —Å—Ç–∞—î 0)
console.log("hello".charAt(null)); // "h" (null —Å—Ç–∞—î 0)
console.log("hello".charAt([])); // "h" (–ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤ —Å—Ç–∞—î 0)
console.log("hello".charAt([2])); // "l" (–º–∞—Å–∏–≤ –∑ –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –≤ —Ü–µ —á–∏—Å–ª–æ)
console.log("hello".charAt([2, 3])); // "h" (—ñ–≥–Ω–æ—Ä—É—î—Ç—å—Å—è –≤—Å–µ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è)
console.log("hello".charAt({})); // "h" (–æ–±'—î–∫—Ç —Å—Ç–∞—î 0)
console.log("hello".charAt(() => { })); // "h" (—Ñ—É–Ω–∫—Ü—ñ—è —Å—Ç–∞—î 0)
console.log("hello".charAt(Symbol())); // TypeError: Cannot convert a Symbol to a string
console.log("hello".charAt(true)); // "e" (boolean –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –Ω–∞ 1)
console.log("hello".charAt(false)); // "h" (boolean –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –Ω–∞ 0)
console.log("hello".charAt("2")); // "l" (—Ä—è–¥–æ–∫ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –Ω–∞ —á–∏—Å–ª–æ)
console.log("hello".charAt("abc")); // "h" (–Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—î 0)

// –ü—Ä–∏–π–º–∞—î –∞—Ä–≥—É–º–µ–Ω—Ç–∏, —è–∫—ñ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—é—Ç—å—Å—è –Ω–∞ —á–∏—Å–ª–∞ (NaN, undefined, –æ–±'—î–∫—Ç–∏, –º–∞—Å–∏–≤–∏).
// –ü–æ–≤–µ—Ä—Ç–∞—î "", –∫–æ–ª–∏ —ñ–Ω–¥–µ–∫—Å –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ, –±–µ–∑ –∂–æ–¥–Ω–æ–≥–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è.


// String.prototype.fromCharCode
console.log(String.fromCharCode(65)); // "A"
console.log(String.fromCharCode(97, 98, 99)); // "abc"
console.log(String.fromCharCode(8364)); // "‚Ç¨"
console.log(String.fromCharCode(55357, 56835)); // "üê£" (—Å—É—Ä–æ–≥–∞—Ç–Ω–∞ –ø–∞—Ä–∞)
console.log(String.fromCharCode()); // "" (–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤)
console.log(String.fromCharCode(-1)); // "\uffff" (–æ–±—Ä–æ–±–ª—è—î —è–∫ 0xFFFF)
console.log(String.fromCharCode(0)); // "\0"
console.log(String.fromCharCode(1114111)); // "ÔøΩ" (–∑–∞–π–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è)
console.log(String.fromCharCode(3.5)); // "\u0003" (–æ–∫—Ä—É–≥–ª—é—î—Ç—å—Å—è –¥–æ 3)
console.log(String.fromCharCode(NaN)); // "\0" (NaN —Å—Ç–∞—î 0)
console.log(String.fromCharCode(Infinity)); // "\0" (Infinity —Å—Ç–∞—î 0)
console.log(String.fromCharCode(null)); // "\0" (null —Å—Ç–∞—î 0)
console.log(String.fromCharCode(undefined)); // "\0" (undefined —Å—Ç–∞—î 0)
console.log(String.fromCharCode([])); // "\0" (–º–∞—Å–∏–≤ —Å—Ç–∞—î 0)
console.log(String.fromCharCode([65])); // "A" (–º–∞—Å–∏–≤ –∑ –æ–¥–Ω–∏–º –µ–ª–µ–º–µ–Ω—Ç–æ–º)
console.log(String.fromCharCode([65, 66])); // "A" (—ñ–≥–Ω–æ—Ä—É—î—Ç—å—Å—è –≤—Å–µ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è)
console.log(String.fromCharCode({})); // "\0" (–æ–±'—î–∫—Ç —Å—Ç–∞—î 0)
console.log(String.fromCharCode(true)); // "\u0001" (boolean true —Å—Ç–∞—î 1)
console.log(String.fromCharCode(false)); // "\0" (boolean false —Å—Ç–∞—î 0)

// –ü–æ–≤–µ—Ä—Ç–∞—î —Å–∏–º–≤–æ–ª–∏ –Ω–∞–≤—ñ—Ç—å –¥–ª—è –≤—ñ–¥'—î–º–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å —á–∏ –∑–Ω–∞—á–µ–Ω—å, –±—ñ–ª—å—à–∏—Ö –∑–∞ 0xFFFF.
// –Ü–≥–Ω–æ—Ä—É—î —á–∞—Å—Ç–∏–Ω—É –¥–∞–Ω–∏—Ö, —è–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –±—ñ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω—å, –Ω—ñ–∂ –ø–æ—Ç—Ä—ñ–±–Ω–æ.



// String.prototype.charCodeAt
console.log("hello".charCodeAt(0)); // 104
console.log("hello".charCodeAt(4)); // 111
console.log("hello".charCodeAt(5)); // NaN (—ñ–Ω–¥–µ–∫—Å –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ)
console.log("hello".charCodeAt(-1)); // NaN (–Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π —ñ–Ω–¥–µ–∫—Å)
console.log("hello".charCodeAt(1.5)); // 101 (–æ–∫—Ä—É–≥–ª—é—î—Ç—å—Å—è –¥–æ 1)
console.log("hello".charCodeAt(NaN)); // 104 (NaN —Å—Ç–∞—î 0)
console.log("hello".charCodeAt(Infinity)); // NaN (—ñ–Ω–¥–µ–∫—Å –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ)
console.log("hello".charCodeAt(undefined)); // 104 (undefined —Å—Ç–∞—î 0)
console.log("hello".charCodeAt(null)); // 104 (null —Å—Ç–∞—î 0)
console.log("hello".charCodeAt([])); // 104 (–º–∞—Å–∏–≤ —Å—Ç–∞—î 0)
console.log("hello".charCodeAt([2])); // 108 (–º–∞—Å–∏–≤ –∑ –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º)
console.log("hello".charCodeAt([2, 3])); // 104 (—ñ–≥–Ω–æ—Ä—É—î—Ç—å—Å—è –≤—Å–µ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è)
console.log("hello".charCodeAt({})); // NaN (–æ–±'—î–∫—Ç –Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç—É—î—Ç—å—Å—è –≤ —á–∏—Å–ª–æ)
console.log("hello".charCodeAt(Symbol())); // TypeError: Cannot convert a Symbol to a number
console.log("hello".charCodeAt(true)); // 101 (boolean true —Å—Ç–∞—î 1)
console.log("hello".charCodeAt(false)); // 104 (boolean false —Å—Ç–∞—î 0)
console.log("hello".charCodeAt("2")); // 108 (—Ä—è–¥–æ–∫ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –Ω–∞ —á–∏—Å–ª–æ)
console.log("hello".charCodeAt("abc")); // 104 (–Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—î 0)

// –ú–æ–∂–µ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –Ω–∞ —á–∏—Å–ª–∞.
// –ü–æ–≤–µ—Ä—Ç–∞—î NaN, —è–∫—â–æ —ñ–Ω–¥–µ–∫—Å –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ.



// String.prototype.concat
console.log("hello".concat(" world")); // "hello world"
console.log("hello".concat("!", " How are you?")); // "hello! How are you?"
console.log("".concat("Test")); // "Test" (–ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ + –∑–Ω–∞—á–µ–Ω–Ω—è)
console.log("hello".concat()); // "hello" (–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤)
console.log("hello".concat(null)); // "hellonull"
console.log("hello".concat(undefined)); // "helloundefined"
console.log("hello".concat(123)); // "hello123" (—á–∏—Å–ª–æ —Å—Ç–∞—î —Ä—è–¥–∫–æ–º)
console.log("hello".concat(true)); // "hellotrue" (boolean —Å—Ç–∞—î —Ä—è–¥–∫–æ–º)
console.log("hello".concat([])); // "hello" (–ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤ —Å—Ç–∞—î –ø–æ—Ä–æ–∂–Ω—ñ–º —Ä—è–¥–∫–æ–º)
console.log("hello".concat([1, 2, 3])); // "hello1,2,3" (–º–∞—Å–∏–≤ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î—Ç—å—Å—è —É —Ä—è–¥–æ–∫)
console.log("hello".concat({})); // "hello[object Object]" (–æ–±'—î–∫—Ç –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –Ω–∞ —Ä—è–¥–æ–∫)
console.log("hello".concat(() => { })); // "hello() => {}" (—Ñ—É–Ω–∫—Ü—ñ—è —Å—Ç–∞—î —ó—ó —Ç–µ–∫—Å—Ç–æ–≤–∏–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è–º)
console.log("hello".concat(Symbol("test"))); // TypeError: Cannot convert a Symbol to a string
console.log("hello".concat(Infinity)); // "helloInfinity"
console.log("hello".concat(NaN)); // "helloNaN"
console.log("hello".concat(new Date())); // "helloTue Jan 06 2025..." (—Ä—è–¥–∫–æ–≤–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –¥–∞—Ç–∏)
console.log("hello".concat("world".toUpperCase())); // "helloWORLD"
console.log("hello".concat(" ", "world".length)); // "hello 5"
console.log("hello".concat(null, undefined, 42)); // "hellonullundefined42"

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç—É—î –∞—Ä–≥—É–º–µ–Ω—Ç–∏ —É —Ä—è–¥–∫–∏, —â–æ –º–æ–∂–µ –ø—Ä–∏–∑–≤–æ–¥–∏—Ç–∏ –¥–æ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.
// –í–∏–∫–ª–∏–∫–∞—î TypeError, —è–∫—â–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º —î Symbol.



// String.prototype.endsWith
console.log("hello world".endsWith("world")); // true
console.log("hello world".endsWith("world!")); // false
console.log("hello world".endsWith("")); // true (–ø–æ—Ä–æ–∂–Ω—ñ–π —Å—É—Ñ—ñ–∫—Å –∑–∞–≤–∂–¥–∏ true)
console.log("hello world".endsWith("world", 11)); // true (–¥–æ–≤–∂–∏–Ω–∞ —Ä—è–¥–∫–∞ –≤—Ä–∞—Ö–æ–≤–∞–Ω–∞)
console.log("hello world".endsWith("hello", 5)); // true
console.log("hello world".endsWith("world", 5)); // false
console.log("hello world".endsWith()); // false (–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤)
console.log("hello world".endsWith(undefined)); // false (undefined —Å—Ç–∞—î —Ä—è–¥–∫–æ–º "undefined")
console.log("hello world".endsWith(null)); // false (null —Å—Ç–∞—î —Ä—è–¥–∫–æ–º "null")
console.log("hello world".endsWith([])); // false (–ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤ —Å—Ç–∞—î "")
console.log("hello world".endsWith([1, 2, 3])); // false (–º–∞—Å–∏–≤ —Å—Ç–∞—î "1,2,3")
console.log("hello world".endsWith({})); // false (–æ–±'—î–∫—Ç —Å—Ç–∞—î "[object Object]")
console.log("hello world".endsWith(Symbol("test"))); // TypeError: Cannot convert a Symbol to a string
console.log("hello world".endsWith(NaN)); // false (NaN —Å—Ç–∞—î "NaN")
console.log("hello world".endsWith("world", NaN)); // false (NaN –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —è–∫ 0)
console.log("hello world".endsWith("world", Infinity)); // true (Infinity –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —è–∫ –¥–æ–≤–∂–∏–Ω–∞ —Ä—è–¥–∫–∞)
console.log("hello world".endsWith("w", 11)); // false (—á—É—Ç–ª–∏–≤–∏–π –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É)
console.log("hello world".endsWith("w", 6)); // true
console.log("hello world".endsWith("world", -1)); // false (–Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —è–∫ 0)

// –ü—Ä–∏–π–º–∞—î undefined, null, –æ–±'—î–∫—Ç–∏, —ñ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç—É—î —ó—Ö —É —Ä—è–¥–∫–∏.
// –í–∏–∫–ª–∏–∫–∞—î TypeError, —è–∫—â–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ Symbol.



// String.prototype.includes
console.log("hello world".includes("world")); // true
console.log("hello world".includes("world!")); // false
console.log("hello world".includes("")); // true (–ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –∑–∞–≤–∂–¥–∏ true)
console.log("hello world".includes("world", 6)); // true
console.log("hello world".includes("hello", 5)); // false
console.log("hello world".includes()); // false (–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤)
console.log("hello world".includes(undefined)); // false (undefined —Å—Ç–∞—î "undefined")
console.log("hello world".includes(null)); // false (null —Å—Ç–∞—î "null")
console.log("hello world".includes([])); // false (–ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤ —Å—Ç–∞—î "")
console.log("hello world".includes([1, 2, 3])); // false (–º–∞—Å–∏–≤ —Å—Ç–∞—î "1,2,3")
console.log("hello world".includes({})); // false (–æ–±'—î–∫—Ç —Å—Ç–∞—î "[object Object]")
console.log("hello world".includes(Symbol("test"))); // TypeError: Cannot convert a Symbol to a string
console.log("hello world".includes(NaN)); // false (NaN —Å—Ç–∞—î "NaN")
console.log("hello world".includes("world", NaN)); // true (NaN –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —è–∫ 0)
console.log("hello world".includes("world", Infinity)); // false (—ñ–Ω–¥–µ–∫—Å –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ)
console.log("hello world".includes("w")); // true
console.log("hello world".includes("W")); // false (—á—É—Ç–ª–∏–≤–∏–π –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É)
console.log("hello world".includes(" ", 5)); // true
console.log("hello world".includes("world", -1)); // true (–Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —è–∫ 0)

// –ü—Ä–∏–π–º–∞—î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ —Ç–∞ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç—É—î —ó—Ö —É —Ä—è–¥–∫–∏.
// –í–∏–∫–ª–∏–∫–∞—î TypeError, —è–∫—â–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ Symbol.



// String.prototype.indexOf
console.log("hello world".indexOf("world")); // 6
console.log("hello world".indexOf("world!")); // -1
console.log("hello world".indexOf("")); // 0 (–ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –∑–Ω–∞–π–¥–µ–Ω–∏–π –Ω–∞ –ø–æ—á–∞—Ç–∫—É)
console.log("hello world".indexOf("world", 6)); // 6
console.log("hello world".indexOf("hello", 5)); // -1
console.log("hello world".indexOf()); // -1 (–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤)
console.log("hello world".indexOf(undefined)); // -1 (undefined —Å—Ç–∞—î "undefined")
console.log("hello world".indexOf(null)); // -1 (null —Å—Ç–∞—î "null")
console.log("hello world".indexOf([])); // 0 (–ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤ —Å—Ç–∞—î –ø–æ—Ä–æ–∂–Ω—ñ–º —Ä—è–¥–∫–æ–º)
console.log("hello world".indexOf([1, 2, 3])); // -1 (–º–∞—Å–∏–≤ —Å—Ç–∞—î "1,2,3")
console.log("hello world".indexOf({})); // -1 (–æ–±'—î–∫—Ç —Å—Ç–∞—î "[object Object]")
console.log("hello world".indexOf(Symbol("test"))); // TypeError: Cannot convert a Symbol to a string
console.log("hello world".indexOf(NaN)); // -1 (NaN —Å—Ç–∞—î "NaN")
console.log("hello world".indexOf("world", NaN)); // 6 (NaN –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —è–∫ 0)
console.log("hello world".indexOf("world", Infinity)); // -1 (—ñ–Ω–¥–µ–∫—Å –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ)
console.log("hello world".indexOf("w")); // 6
console.log("hello world".indexOf("W")); // -1 (—á—É—Ç–ª–∏–≤–∏–π –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É)
console.log("hello world".indexOf(" ", 5)); // 5
console.log("hello world".indexOf("world", -1)); // 6 (–Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —è–∫ 0)

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç—É—î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ —É —Ä—è–¥–∫–∏.
// –í–∏–∫–ª–∏–∫–∞—î TypeError, —è–∫—â–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ Symbol.



// String.prototype.lastIndexOf
console.log("hello world world".lastIndexOf("world")); // 12
console.log("hello world".lastIndexOf("world!")); // -1
console.log("hello world".lastIndexOf("")); // 11 (–ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –∫—ñ–Ω—Ü—ñ)
console.log("hello world".lastIndexOf("world", 6)); // 6
console.log("hello world".lastIndexOf("hello", 5)); // 0
console.log("hello world".lastIndexOf()); // -1 (–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤)
console.log("hello world".lastIndexOf(undefined)); // -1 (undefined —Å—Ç–∞—î "undefined")
console.log("hello world".lastIndexOf(null)); // -1 (null —Å—Ç–∞—î "null")
console.log("hello world".lastIndexOf([])); // 11 (–ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤ —Å—Ç–∞—î –ø–æ—Ä–æ–∂–Ω—ñ–º —Ä—è–¥–∫–æ–º)
console.log("hello world".lastIndexOf([1, 2, 3])); // -1 (–º–∞—Å–∏–≤ —Å—Ç–∞—î "1,2,3")
console.log("hello world".lastIndexOf({})); // -1 (–æ–±'—î–∫—Ç —Å—Ç–∞—î "[object Object]")
console.log("hello world".lastIndexOf(Symbol("test"))); // TypeError: Cannot convert a Symbol to a string
console.log("hello world".lastIndexOf(NaN)); // -1 (NaN —Å—Ç–∞—î "NaN")
console.log("hello world".lastIndexOf("world", NaN)); // -1 (NaN –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —è–∫ 0)
console.log("hello world".lastIndexOf("world", Infinity)); // 6 (Infinity –Ω–µ –≤–ø–ª–∏–≤–∞—î)
console.log("hello world".lastIndexOf("w")); // 6
console.log("hello world".lastIndexOf("W")); // -1 (—á—É—Ç–ª–∏–≤–∏–π –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É)
console.log("hello world".lastIndexOf(" ", 5)); // 5
console.log("hello world".lastIndexOf("world", -1)); // -1 (–Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —è–∫ 0)

// –ß—É—Ç–ª–∏–≤—ñ—Å—Ç—å –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ç—Ä—É–¥–Ω–æ—â—ñ.
// –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç—É—é—Ç—å—Å—è —É —Ä—è–¥–∫–∏.
// –í–∏–∫–ª–∏–∫–∞—î TypeError, —è–∫—â–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ Symbol.



// String.prototype.match
console.log("hello world".match(/world/)); // ["world"]
console.log("hello world".match(/world/g)); // ["world"]
console.log("hello world world".match(/world/g)); // ["world", "world"]
console.log("hello world".match(/World/i)); // ["world"] (—ñ–≥–Ω–æ—Ä—É—î —Ä–µ–≥—ñ—Å—Ç—Ä)
console.log("hello world".match(/hello|world/)); // ["hello"]
console.log("hello world".match("world")); // TypeError: Argument must be a RegExp
console.log("hello world".match(undefined)); // null (undefined –Ω–µ –≤–∏–∫–ª–∏–∫–∞—î –ø–æ–º–∏–ª–∫—É)
console.log("hello world".match(null)); // TypeError: Cannot convert null to object
console.log("hello world".match(/z/)); // null (–Ω–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ)
console.log("hello world".match(/z/g)); // null (–Ω–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ)
console.log("hello world".match(/o/g)); // ["o", "o"]
console.log("hello world".match(/o/)); // ["o"]
console.log("hello world".match([])); // TypeError: Argument must be a RegExp
console.log("hello world".match({})); // TypeError: Argument must be a RegExp
console.log("hello world".match(/o/g).length); // 2
console.log("hello world".match(/w|l/g)); // ["l", "l", "l", "w"]
console.log("hello world".match(/[a-z]/g)); // ["h", "e", "l", "l", "o", "w", "o", "r", "l", "d"]
console.log("12345".match(/\d/g)); // ["1", "2", "3", "4", "5"]
console.log("hello123".match(/\d+/)); // ["123"]
console.log("hello".match(/[^a-z]/)); // null (–ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏)

// –Ø–∫—â–æ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —î —Ä–µ–≥—É–ª—è—Ä–Ω–∏–º –≤–∏—Ä–∞–∑–æ–º, –º–µ—Ç–æ–¥ –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É.
// –ü–æ–≤–µ—Ä—Ç–∞—î null, —è–∫—â–æ –Ω–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π, —â–æ –ø–æ—Ç—Ä–µ–±—É—î –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.



// String.prototype.matchAll
for (let match of "test1 test2 test3".matchAll(/test\d/g)) {
    console.log(match[0]); // test1, test2, test3
}
console.log([... "hello world".matchAll(/o/g)]); // [ ["o"], ["o"] ]
console.log([... "hello world".matchAll(/o./g)]); // [ ["or"] ]
console.log([... "hello123world456".matchAll(/\d+/g)]); // [ ["123"], ["456"] ]
console.log("hello".matchAll()); // TypeError: Missing argument
console.log("hello".matchAll("o")); // TypeError: First argument must be a RegExp
console.log([... "hello".matchAll(/z/g)]); // [] (–ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤)
console.log([... "".matchAll(/./g)]); // [] (–ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –Ω–µ –º–∞—î –∑–±—ñ–≥—ñ–≤)
console.log([... "a b c".matchAll(/\w/g)]); // [ ["a"], ["b"], ["c"] ]
console.log([... "aaa".matchAll(/a{2}/g)]); // [ ["aa"] ]
console.log([... "123abc".matchAll(/\D/g)]); // [ ["a"], ["b"], ["c"] ]

// –ê—Ä–≥—É–º–µ–Ω—Ç –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –º–∞—î –±—É—Ç–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–º –≤–∏—Ä–∞–∑–æ–º, —ñ–Ω–∞–∫—à–µ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è TypeError.



// String.prototype.normalize
console.log("√©".normalize("NFC")); // "√©"
console.log("√©".normalize("NFD")); // "eÃÅ"
console.log("\u0041\u0301".normalize("NFC")); // "√Å"
console.log("\u0041\u0301".normalize("NFD")); // "AÃÅ"
console.log("test".normalize()); // "test" (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º NFC)
console.log("test".normalize("INVALID")); // RangeError: Invalid normalization form
console.log("ùîòùî´ùî¶ùî†ùî¨ùî°ùî¢".normalize("NFKC")); // "Unicode"
console.log("A\u0301".normalize("NFD").length); // 2 (—Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤)
console.log("A\u0301".normalize("NFC").length); // 1 (–æ–±'—î–¥–Ω–∞–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤)
console.log("".normalize("NFD")); // "" (–ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è)
console.log("√©".normalize(null)); // "√©" (null –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —è–∫ NFC)
console.log("√©".normalize(undefined)); // "√©" (undefined –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —è–∫ NFC)

// –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó (INVALID) –≤–∏–∫–ª–∏–∫–∞—é—Ç—å RangeError.



// String.prototype.padEnd
console.log("hello".padEnd(10, ".")); // "hello....."
console.log("hello".padEnd(10)); // "hello     "
console.log("hello".padEnd(3)); // "hello" (–¥–æ–≤–∂–∏–Ω–∞ –≤–∂–µ –±—ñ–ª—å—à–∞)
console.log("".padEnd(5, "x")); // "xxxxx" (–ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –¥–æ–ø–æ–≤–Ω—é—î—Ç—å—Å—è)
console.log("test".padEnd(7, "123")); // "test123"
console.log("test".padEnd(9, "123")); // "test12312"
console.log("test".padEnd(10, "")); // "test" (–ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –Ω–µ –¥–æ–¥–∞—î—Ç—å—Å—è)
console.log("test".padEnd(10, null)); // "testnullnu" (null —Å—Ç–∞—î —Ä—è–¥–∫–æ–º)
console.log("test".padEnd(10, undefined)); // "testundef" (undefined —Å—Ç–∞—î —Ä—è–¥–∫–æ–º)
console.log("test".padEnd(10, {})); // "test[obje" (–æ–±'—î–∫—Ç —Å—Ç–∞—î "[object Object]")
console.log("test".padEnd(10, Symbol("x"))); // TypeError: Cannot convert a Symbol to a string
console.log("test".padEnd(20, " ")); // "test                "
console.log("test".padEnd(Infinity, ".")); // RangeError: Invalid string length

// –°–∏–º–≤–æ–ª–∏ –¥–æ–¥–∞—é—Ç—å—Å—è –Ω–∞–≤—ñ—Ç—å —ñ–∑ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–º–∏ —Ç–∏–ø–∞–º–∏ (null, undefined, –æ–±‚Äô—î–∫—Ç).
// –í–∏–∫–ª–∏–∫–∞—î RangeError –ø—Ä–∏ –¥–æ–≤–∂–∏–Ω—ñ, —â–æ –ø–µ—Ä–µ–≤–∏—â—É—î –¥–æ–ø—É—Å—Ç–∏–º—É.



// String.prototype.padStart
console.log("hello".padStart(10, ".")); // ".....hello"
console.log("hello".padStart(10)); // "     hello"
console.log("hello".padStart(3)); // "hello" (–¥–æ–≤–∂–∏–Ω–∞ –≤–∂–µ –±—ñ–ª—å—à–∞)
console.log("".padStart(5, "x")); // "xxxxx" (–ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –¥–æ–ø–æ–≤–Ω—é—î—Ç—å—Å—è)
console.log("test".padStart(7, "123")); // "123test"
console.log("test".padStart(9, "123")); // "123123tes"
console.log("test".padStart(10, "")); // "test" (–ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –Ω–µ –¥–æ–¥–∞—î—Ç—å—Å—è)
console.log("test".padStart(10, null)); // "nullnutest" (null —Å—Ç–∞—î —Ä—è–¥–∫–æ–º)
console.log("test".padStart(10, undefined)); // "undefinetest" (undefined —Å—Ç–∞—î —Ä—è–¥–∫–æ–º)
console.log("test".padStart(10, {})); // "[objectObtest" (–æ–±'—î–∫—Ç —Å—Ç–∞—î "[object Object]")
console.log("test".padStart(10, Symbol("x"))); // TypeError: Cannot convert a Symbol to a string
console.log("test".padStart(20, " ")); // "                test"
console.log("test".padStart(Infinity, ".")); // RangeError: Invalid string length

// –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–æ padEnd, –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ —Ç–∏–ø–∏ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–æ.



// String.prototype.repeat
console.log("hello".repeat(3)); // "hellohellohello"
console.log("hello".repeat(0)); // "" (–ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫)
console.log("hello".repeat(-1)); // RangeError: Invalid count value
console.log("hello".repeat(1)); // "hello"
console.log("hello".repeat(1.5)); // "hello" (–æ–∫—Ä—É–≥–ª—é—î—Ç—å—Å—è –¥–æ —Ü—ñ–ª–æ–≥–æ)
console.log("hello".repeat(NaN)); // "" (NaN –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —è–∫ 0)
console.log("hello".repeat(Infinity)); // RangeError: Invalid count value
console.log("hello".repeat(null)); // "" (null –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —è–∫ 0)
console.log("hello".repeat(undefined)); // "" (undefined –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —è–∫ 0)
console.log("hello".repeat(true)); // "hello" (true –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —è–∫ 1)
console.log("hello".repeat(false)); // "" (false –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —è–∫ 0)
console.log("hello".repeat(2e3)); // "hellohello..." (–ø—Ä–∞—Ü—é—î –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –∑–Ω–∞—á–µ–Ω—å)

// –í–∏–∫–ª–∏–∫–∞—î RangeError –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö –∞–±–æ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å.
// –ê—Ä–≥—É–º–µ–Ω—Ç–∏ NaN, null, undefined –º–∞—é—Ç—å –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω—É –ø–æ–≤–µ–¥—ñ–Ω–∫—É.



// String.prototype.replace
console.log("hello world".replace("world", "everyone")); // "hello everyone"
console.log("hello world".replace(/world/, "everyone")); // "hello everyone"
console.log("hello world world".replace("world", "everyone")); // "hello everyone world"
console.log("hello world".replace(/world/g, "everyone")); // "hello everyone"
console.log("hello world".replace(/(hello) (world)/, "$2 $1")); // "world hello"
console.log("hello world".replace(/world/, (match) => match.toUpperCase())); // "hello WORLD"
console.log("hello world".replace("world", null)); // "hello null"
console.log("hello world".replace("world", undefined)); // "hello undefined"
console.log("hello world".replace(/o/g, (match, offset) => offset)); // "h0ll4 w7rld"

// –ó–∞–º—ñ–Ω–Ω–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç—É—î—Ç—å—Å—è —É —Ä—è–¥–æ–∫, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —Ü–µ null, undefined —á–∏ –æ–±‚Äô—î–∫—Ç.



// String.prototype.replaceAll
console.log("hello world world".replaceAll("world", "everyone")); // "hello everyone everyone"
console.log("hello world".replaceAll(/o/g, "0")); // "hell0 w0rld"
console.log("hello world world".replaceAll(/world/g, "everyone")); // "hello everyone everyone"
console.log("hello world".replaceAll("world", "everyone")); // "hello everyone"
console.log("hello world".replaceAll("o", (match) => match.toUpperCase())); // "hellO wOrld"
console.log("hello world".replaceAll("world", null)); // "hello null"
console.log("hello world".replaceAll("world", undefined)); // "hello undefined"
console.log("hello world".replaceAll("o", "")); // "hell wrld" (–≤–∏–¥–∞–ª—è—î "o")
console.log("hello world".replaceAll(/o/g, (match, offset) => offset)); // "hell0 w7rld"
console.log("hello world".replaceAll("world", (match) => match.toUpperCase())); // "hello WORLD"
console.log("hello world".replaceAll(/world/g, 123)); // "hello 123 123"

// –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –º–µ—Ç–æ–¥—É replace, –∑–∞–º—ñ–Ω–Ω–∏–∫–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–º–∏ (null, undefined).
// –ü—Ä–∏–π–º–∞—î –ª–∏—à–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ñ –≤–∏—Ä–∞–∑–∏ –∑ –≥–ª–æ–±–∞–ª—å–Ω–∏–º —Ñ–ª–∞–≥–æ–º g.



// String.prototype.search
console.log("hello world".search("world")); // 6
console.log("hello world".search(/world/)); // 6
console.log("hello world".search(/world/i)); // 6 (—ñ–≥–Ω–æ—Ä—É—î —Ä–µ–≥—ñ—Å—Ç—Ä)
console.log("hello world".search("earth")); // -1
console.log("hello world".search(/hello/)); // 0
console.log("hello world".search(/o/g)); // 4
console.log("hello world".search(/o/)); // 4
console.log("hello world".search(null)); // TypeError: Argument must be a RegExp
console.log("hello world".search(undefined)); // TypeError: Argument must be a RegExp
console.log("hello world".search("world", 6)); // 6 (–ø–æ—á–∞—Ç–∫–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å –Ω–µ –≤–ø–ª–∏–≤–∞—î)
console.log("hello world".search([])); // TypeError: Argument must be a RegExp
console.log("hello world".search(Symbol("test"))); // TypeError: Cannot convert a Symbol to a string

// –ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑, —ñ–Ω–∞–∫—à–µ –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞–Ω–æ TypeError.



// String.prototype.slice
console.log("hello world".slice(0, 5)); // "hello"
console.log("hello world".slice(6)); // "world"
console.log("hello world".slice(-5)); // "world"
console.log("hello world".slice(0, -6)); // "hello"
console.log("hello world".slice(2, -3)); // "llo wor"
console.log("hello world".slice(-6, -3)); // "wor"
console.log("hello world".slice(3, 3)); // "" (–ø—É—Å—Ç–∏–π —Ä—è–¥–æ–∫)
console.log("hello world".slice(5, 3)); // "" (–ø–æ—á–∞—Ç–∫–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å –±—ñ–ª—å—à–∏–π –∑–∞ –∫—ñ–Ω—Ü–µ–≤–∏–π)
console.log("hello world".slice("5", 10)); // " world" (—Å—Ç—Ä—ñ—á–∫–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å)
console.log("hello world".slice(null, 5)); // "hello" (null –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —è–∫ 0)
console.log("hello world".slice(undefined, 5)); // "hello" (undefined –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —è–∫ 0)
console.log("hello world".slice(NaN, 5)); // "hello" (NaN –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —è–∫ 0)
console.log("hello world".slice(Symbol("test"), 5)); // TypeError: Cannot convert a Symbol to a string

// null, undefined, NaN –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω—ñ —è–∫ —ñ–Ω–¥–µ–∫—Å–∏, –∞–ª–µ –Ω–∞–¥–∞—é—Ç—å –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.
// –ù–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î —Å–∏–º–≤–æ–ª–∏ (–≤–∏–∫–ª–∏–∫–∞—î TypeError).



// String.prototype.split
console.log("hello world".split(" ")); // ["hello", "world"]
console.log("hello world".split("o")); // ["hell", " w", "rld"]
console.log("hello world".split("")); // ["h", "e", "l", "l", "o", " ", "w", "o", "r", "l", "d"]
console.log("hello world".split("l")); // ["he", "", "o wor", "d"]
console.log("hello world".split(/o/)); // ["hell", " w", "rld"]
console.log("hello world".split(" ", 1)); // ["hello"] (–æ–±–º–µ–∂—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤)
console.log("hello world".split()); // ["hello world"] (–±–µ–∑ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∞)
console.log("hello world".split(undefined)); // ["hello world"] (undefined –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —è–∫ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
console.log("hello world".split(null)); // ["hello world"] (null –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —è–∫ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
console.log("hello world".split(Symbol("split"))); // TypeError: Cannot convert a Symbol to a string

// –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ undefined –∞–±–æ null —è–∫ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫, –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –≤–µ—Å—å —Ä—è–¥–æ–∫ –≤ –º–∞—Å–∏–≤—ñ.
// –ü–æ—Ç—Ä—ñ–±–Ω–æ –±—É—Ç–∏ –æ–±–µ—Ä–µ–∂–Ω–∏–º –∑ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–º–∏ –≤–∏—Ä–∞–∑–∞–º–∏ —Ç–∞ —Ç–∏–ø–∞–º–∏.



// String.prototype.startsWith
console.log("hello world".startsWith("hello")); // true
console.log("hello world".startsWith("world")); // false
console.log("hello world".startsWith("h")); // true
console.log("hello world".startsWith(" ", 5)); // true (–ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ –ø—Ä–æ–±—ñ–ª—É –ø—ñ—Å–ª—è 5 —Å–∏–º–≤–æ–ª—ñ–≤)
console.log("hello world".startsWith("H")); // false (—Ä–µ–≥—ñ—Å—Ç—Ä –º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è)
console.log("hello world".startsWith("world", 6)); // true (–ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ "world" –∑ —ñ–Ω–¥–µ–∫—Å—É 6)
console.log("hello world".startsWith("world", 0)); // false (–Ω–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑ –ø–æ—á–∞—Ç–∫—É)
console.log("hello world".startsWith("world", NaN)); // true (NaN –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —è–∫ 0)
console.log("hello world".startsWith("hello", null)); // true (null –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —è–∫ 0)
console.log("hello world".startsWith(Symbol("test"))); // TypeError: Cannot convert a Symbol to a string

// –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ NaN –∞–±–æ null —è–∫ —ñ–Ω–¥–µ–∫—Å, –≤–æ–Ω–∏ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç—É—é—Ç—å—Å—è —è–∫ 0.



// String.prototype.substring
console.log("hello world".substring(0, 5)); // "hello"
console.log("hello world".substring(6)); // "world"
console.log("hello world".substring(-3, -1)); // "world" (–Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ —ñ–Ω–¥–µ–∫—Å–∏ —Ç—Ä–∞–∫—Ç—É—é—Ç—å—Å—è —è–∫ 0)
console.log("hello world".substring(5, 0)); // "hello" (—ñ–Ω–¥–µ–∫—Å–∏ –º—ñ–Ω—è—é—Ç—å—Å—è –º—ñ—Å—Ü—è–º–∏)
console.log("hello world".substring(6, 11)); // "world"
console.log("hello world".substring(0, 0)); // "" (–ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫)
console.log("hello world".substring(5, 5)); // "" (–ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫)
console.log("hello world".substring(NaN, 5)); // "hello" (NaN —Ç—Ä–∞–∫—Ç—É—î—Ç—å—Å—è —è–∫ 0)
console.log("hello world".substring(undefined, 5)); // "hello" (undefined —Ç—Ä–∞–∫—Ç—É—î—Ç—å—Å—è —è–∫ 0)
console.log("hello world".substring(0, Symbol("test"))); // TypeError: Cannot convert a Symbol to a string
console.log("hello world".substring(10, 100)); // "world" (100 –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ —Ä—è–¥–∫–∞, –∞–ª–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ)

// –ù–µ–≥–∞—Ç–∏–≤–Ω—ñ —ñ–Ω–¥–µ–∫—Å–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç—É—é—Ç—å—Å—è —è–∫ 0, —â–æ –Ω–µ –∑–∞–≤–∂–¥–∏ –±–∞–∂–∞–Ω–æ.
// –ü–µ—Ä–µ–¥–∞—á–∞ –Ω–µ–¥—ñ–π—Å–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å, —Ç–∞–∫–∏—Ö —è–∫ NaN –∞–±–æ undefined, –Ω–µ –≤–∏–∫–ª–∏–∫–∞—î –ø–æ–º–∏–ª–æ–∫, –∞–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–º.



// String.prototype.toLowerCase
console.log("HELLO WORLD".toLowerCase()); // "hello world"
console.log("Hello World".toLowerCase()); // "hello world"
console.log("hello world".toLowerCase()); // "hello world"
console.log("–ü—Ä–∏–≤–µ—Ç –ú–∏—Ä".toLowerCase()); // "–ø—Ä–∏–≤–µ—Ç –º–∏—Ä" (–∫–∏—Ä–∏–ª–∏—Ü—è —Ç–∞–∫–æ–∂ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î—Ç—å—Å—è)
console.log("12345".toLowerCase()); // "12345" (—Ü–∏—Ñ—Ä–∏ –Ω–µ –∑–º—ñ–Ω—é—é—Ç—å—Å—è)
console.log("!@#$%".toLowerCase()); // "!@#$%" (—Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –Ω–µ –∑–º—ñ–Ω—é—é—Ç—å—Å—è)
console.log("Hello 123".toLowerCase()); // "hello 123"
console.log("hello world".toLowerCase(5)); // "hello world" (–∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –º–∞—î –µ—Ñ–µ–∫—Ç—É)
console.log("HELLO".toLowerCase(100)); // "hello" (–∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –º–∞—î –µ—Ñ–µ–∫—Ç—É)

// –ú–µ—Ç–æ–¥ –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ, –æ–¥–Ω–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ –Ω–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ü–∏—Ñ—Ä–∏ —á–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏.



// String.prototype.toUpperCase
console.log("hello world".toUpperCase()); // "HELLO WORLD"
console.log("Hello World".toUpperCase()); // "HELLO WORLD"
console.log("HELLO WORLD".toUpperCase()); // "HELLO WORLD"
console.log("–ø—Ä–∏–≤–µ—Ç –º–∏—Ä".toUpperCase()); // "–ü–†–ò–í–ï–¢ –ú–ò–†" (–∫–∏—Ä–∏–ª–∏—Ü—è —Ç–∞–∫–æ–∂ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î—Ç—å—Å—è)
console.log("12345".toUpperCase()); // "12345" (—Ü–∏—Ñ—Ä–∏ –Ω–µ –∑–º—ñ–Ω—é—é—Ç—å—Å—è)
console.log("!@#$%".toUpperCase()); // "!@#$%" (—Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –Ω–µ –∑–º—ñ–Ω—é—é—Ç—å—Å—è)
console.log("Hello 123".toUpperCase()); // "HELLO 123"
console.log("hello world".toUpperCase(5)); // "HELLO WORLD" (–∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –º–∞—î –µ—Ñ–µ–∫—Ç—É)
console.log("hello".toUpperCase(100)); // "HELLO" (–∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –º–∞—î –µ—Ñ–µ–∫—Ç—É)

// –ö–æ—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∞—Ü—é—î –¥–ª—è –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤, –Ω–µ –∑–º—ñ–Ω—é—é—á–∏ —Ü–∏—Ñ—Ä–∏ –∞–±–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏.



// String.prototype.trim
console.log(" ".repeat(1000) + "hello world" + " ".repeat(1000).trim());  // "hello world" (–æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –≤–≤–æ–¥)
console.log(null.trim());  // –û—à–∏–±–∫–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ null –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ trim()
console.log(undefined.trim());  // –û—à–∏–±–∫–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ undefined –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ trim()
console.log((12345).toString().trim());  // "12345" (–º–µ—Ç–æ–¥ trim —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —á–∏—Å–ª–∞–º–∏, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤ —Å—Ç—Ä–æ–∫—É)
console.log("   123  ".trim());  // "123" (—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏)
console.log("hello\u200Bworld".trim());  // "hello\u200Bworld" (–Ω—É–ª—å–æ–≤–∞—è —à–∏—Ä–∏–Ω–∞ –ø—Ä–æ–±–µ–ª–∞ –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –ø—Ä–æ–±–µ–ª–∞–º–∏)
console.log("hello\u202Fworld".trim());  // "hello\u202Fworld" (—Å–∏–º–≤–æ–ª—ã —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è)
console.log("hello world".trim(NaN));  // "hello world" (–º–µ—Ç–æ–¥ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)
console.log({ key: "value" }.trim());  // –û—à–∏–±–∫–∞, —Ç–∞–∫ –∫–∞–∫ –æ–±—ä–µ–∫—Ç –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ trim()
console.log(" ".repeat(10000) + "hello world" + " ".repeat(10000).trim());  // "hello world" (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏)
console.log("\u200Chello world\u200C".trim());  // "hello world" (–Ω–µ–∑–∞–º–µ—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —É–¥–∞–ª—è—é—Ç—Å—è)
console.log({}.toString().trim());  // "" (–º–µ—Ç–æ–¥ toString() –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ —Å—Ç—Ä–æ–∫—É, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π)
console.log(Symbol('sym').toString().trim());  // "Symbol(sym)" (–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫—É, –Ω–æ –º–µ—Ç–æ–¥ trim –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞)



// String.prototype.trimEnd
console.log("hello world   ".trimEnd()); // "hello world"
console.log("hello world  \n\t".trimEnd()); // "hello world" (–≤–∏–¥–∞–ª—è—î —Ç–∞–±—É–ª—è—Ü—ñ—ó —Ç–∞ –Ω–æ–≤—ñ —Ä—è–¥–∫–∏)
console.log("   hello world".trimEnd()); // "   hello world"
console.log("hello world".trimEnd()); // "hello world" (–Ω–µ–º–∞—î –ø—Ä–æ–±—ñ–ª—ñ–≤)
console.log("\t hello world".trimEnd()); // "\t hello world" (–Ω–µ –≤–ø–ª–∏–≤–∞—î –Ω–∞ —Ç–∞–±—É–ª—è—Ü—ñ—é)
console.log("hello world    ".trimEnd()); // "hello world"
console.log("\u200Bhello world".trimEnd()); // "hello world" (–≤–∏–¥–∞–ª—è—î –Ω—É–ª—å–æ–≤—É —à–∏—Ä–∏–Ω—É –ø—Ä–æ–±—ñ–ª–∞)
console.log("hello world\uFEFF".trimEnd()); // "hello world" (–≤–∏–¥–∞–ª—è—î BOM —Å–∏–º–≤–æ–ª–∏)

// –ü—ñ–¥—Ç—Ä–∏–º—É—î –≤—Å—ñ —Ç–∏–ø–∏ –ø—Ä–æ–±—ñ–ª—ñ–≤ —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –∫—ñ–Ω—Ü—è.



// String.prototype.trimStart
console.log("   hello world".trimStart()); // "hello world"
console.log("\t hello world".trimStart()); // "hello world"
console.log("hello world".trimStart()); // "hello world" (–Ω–µ–º–∞—î –ø—Ä–æ–±—ñ–ª—ñ–≤)
console.log("   hello world".trimStart()); // "hello world"
console.log("hello world   ".trimStart()); // "hello world   "
console.log("\u200Bhello world".trimStart()); // "hello world" (–≤–∏–¥–∞–ª—è—î –Ω—É–ª—å–æ–≤—É —à–∏—Ä–∏–Ω—É –ø—Ä–æ–±—ñ–ª–∞)
console.log("hello world\uFEFF".trimStart()); // "hello world" (–≤–∏–¥–∞–ª—è—î BOM —Å–∏–º–≤–æ–ª–∏)

// –ü—ñ–¥—Ç—Ä–∏–º—É—î –≤—Å—ñ —Ç–∏–ø–∏ –ø—Ä–æ–±—ñ–ª—ñ–≤ —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –∫—ñ–Ω—Ü—è.



// String.prototype.localeCompare
console.log("a".localeCompare("b")); // -1 (a < b)
console.log("b".localeCompare("a")); // 1 (b > a)
console.log("a".localeCompare("a")); // 0 (a == a)
console.log("a".localeCompare("A")); // 1 (–≤—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è —Ä–µ–≥—ñ—Å—Ç—Ä)
console.log("abc".localeCompare("abcd")); // -1 (abc < abcd)
console.log("–∞–±–≤".localeCompare("–∞–±–≥")); // -1 (–ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑–∞ –∫–∏—Ä–∏–ª–∏—Ü–µ—é)
console.log("a".localeCompare("–∞")); // -1 (—Ä—ñ–∑–Ω—ñ –∞–ª—Ñ–∞–≤—ñ—Ç–∏, –ª–∞—Ç–∏–Ω–∏—Ü—è —ñ –∫–∏—Ä–∏–ª–∏—Ü—è)
console.log("1".localeCompare("a")); // -1 (—Ü–∏—Ñ—Ä–∏ < –ª—ñ—Ç–µ—Ä–∏)
console.log("hello".localeCompare("hello", "en", { sensitivity: "base" })); // 0 (–±–µ–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ä–µ–≥—ñ—Å—Ç—Ä—É)
console.log("hello".localeCompare("HELLO", "en", { sensitivity: "accent" })); // -1 (—Ä—ñ–∑–Ω–∏—Ü—è –≤ —Ä–µ–≥—ñ—Å—Ç—Ä—ñ)

// –í—Ä–∞—Ö–æ–≤—É—î —Ä–µ–≥—ñ—Å—Ç—Ä, —è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞ —á—É—Ç–ª–∏–≤—ñ—Å—Ç—å, —â–æ –º–æ–∂–µ –ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.
// –í –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –ª–æ–∫–∞–ª—ñ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤—ñ–¥–º—ñ–Ω–Ω–æ—Å—Ç—ñ —É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è.






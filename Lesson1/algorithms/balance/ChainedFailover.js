// –ö–ª–∞—Å—Å —Å–µ—Ä–≤–µ—Ä–∞
class Server {
    constructor(name, maxRequests) {
        this.name = name; // –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞
        this.maxRequests = maxRequests; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        this.currentRequests = 0; // –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    }

    // –ú–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    addRequest() {
        if (this.currentRequests < this.maxRequests) {
            this.currentRequests++;
            return true; // –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç
        }
        return false; // –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω
    }

    // –ú–µ—Ç–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    removeRequest() {
        if (this.currentRequests > 0) {
            this.currentRequests--;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
    isAvailable() {
        return this.currentRequests < this.maxRequests;
    }

    // –í—ã–≤–æ–¥–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
    getStatus() {
        return `${this.name}: ${this.currentRequests}/${this.maxRequests} –∑–∞–ø—Ä–æ—Å–æ–≤`;
    }
}

// –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ Chained Failover
class ChainedFailoverBalancer {
    constructor(servers) {
        this.servers = servers; // –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ (–≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–ø–æ—á–∫–µ)
    }

    // –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    handleRequest(request) {
        console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ "${request}"...`);
        
        for (let server of this.servers) {
            if (server.addRequest()) {
                console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å "${request}" –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${server.name} (${server.currentRequests}/${server.maxRequests})`);
                return;
            }
            console.log(`‚ö†Ô∏è ${server.name} –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω (${server.currentRequests}/${server.maxRequests})`);
        }

        console.log(`üö® –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è "${request}"`);
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
    finishRequest(serverName) {
        const server = this.servers.find((s) => s.name === serverName);
        if (server) {
            server.removeRequest();
            console.log(`üîΩ –û—Å–≤–æ–±–æ–∂–¥—ë–Ω 1 –∑–∞–ø—Ä–æ—Å –Ω–∞ ${server.name} (${server.currentRequests}/${server.maxRequests})`);
        }
    }

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤
    printStatus() {
        console.log("\nüìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤:");
        this.servers.forEach(server => console.log(server.getStatus()));
        console.log(""); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    }
}

// –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–µ—Ä—ã —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
const serverA = new Server("Server A", 5);
const serverB = new Server("Server B", 3);
const serverC = new Server("Server C", 2);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫
const balancer = new ChainedFailoverBalancer([serverA, serverB, serverC]);

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã Chained Failover
balancer.handleRequest("/login");
balancer.handleRequest("/dashboard");
balancer.handleRequest("/api/data");
balancer.handleRequest("/profile");
balancer.handleRequest("/settings");
balancer.handleRequest("/notifications"); // –î–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ Server B
balancer.handleRequest("/logout");
balancer.handleRequest("/home");
balancer.handleRequest("/admin"); // –î–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ Server C
balancer.handleRequest("/error");
balancer.printStatus();

// –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
balancer.finishRequest("Server A");
balancer.finishRequest("Server B");
balancer.printStatus();

// –ù–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç
balancer.handleRequest("/new-request");
balancer.printStatus();
